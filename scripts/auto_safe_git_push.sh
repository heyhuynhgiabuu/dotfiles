#!/usr/bin/env bash
set -euo pipefail

# Source common utilities if available
if [[ -f "$(dirname "$0")/common.sh" ]]; then
  source "$(dirname "$0")/common.sh"
else
  # Fallback logging if common.sh not found
  log_info()    { echo -e "\033[0;34müìã $1\033[0m"; }
  log_success() { echo -e "\033[0;32m‚úÖ $1\033[0m"; }
  log_warning() { echo -e "\033[1;33m‚ö†Ô∏è  $1\033[0m"; }
  log_error()   { echo -e "\033[0;31m‚ùå $1\033[0m"; }
  log_step()    { echo -e "\033[0;36müîÑ $1\033[0m"; }
fi

log_step "B∆∞·ªõc 1: Ki·ªÉm tra remote 'origin'..."
remote_url=$(git remote get-url origin 2>/dev/null || echo "")
if [[ -z "$remote_url" ]]; then
  log_error "Kh√¥ng t√¨m th·∫•y remote 'origin'."
  exit 1
fi

if [[ "$remote_url" != git@github.com:* ]]; then
  if [[ "$remote_url" =~ github.com[:/]+([^/]+)/([^.]+)(\.git)?$ ]]; then
    username="${BASH_REMATCH[1]}"
    repo="${BASH_REMATCH[2]}"
    ssh_url="git@github.com:${username}/${repo}.git"
    log_step "Chuy·ªÉn remote 'origin' sang SSH: $ssh_url"
    git remote set-url origin "$ssh_url"
    remote_url="$ssh_url"
  else
    log_error "Kh√¥ng th·ªÉ ph√¢n t√≠ch remote URL: $remote_url"
    exit 2
  fi
else
  log_success "Remote 'origin' ƒë√£ d√πng SSH."
fi

log_step "B∆∞·ªõc 2: Ki·ªÉm tra x√°c th·ª±c SSH v·ªõi GitHub..."
if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
  log_success "X√°c th·ª±c SSH th√†nh c√¥ng v·ªõi GitHub."
else
  log_error "Kh√¥ng th·ªÉ x√°c th·ª±c SSH v·ªõi GitHub. H√£y ki·ªÉm tra SSH key v√† c·∫•u h√¨nh tr√™n GitHub: https://github.com/settings/keys"
  exit 3
fi

log_step "B∆∞·ªõc 3: Th·ª±c hi·ªán git push..."
git push && log_success "Push th√†nh c√¥ng!" || { log_error "Push th·∫•t b·∫°i!"; exit 4; }
