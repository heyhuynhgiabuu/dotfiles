# AugmentCode Settings
# Global configuration based on official augment.vim documentation
# Source: https://raw.githubusercontent.com/augmentcode/augment.vim/main/doc/augment.txt

# === OFFICIAL OPTIONS ===

# Core completion behavior (official)
disable_completions=false           # g:augment_disable_completions
disable_tab_mapping=false           # g:augment_disable_tab_mapping 
suppress_version_warning=false      # g:augment_suppress_version_warning

# Node.js configuration (official)
node_command="node"                 # g:augment_node_command (default: node)
# Alternative: node_command="/usr/local/bin/node" or "node-22"

# === HIGHLIGHTING CONFIGURATION ===
# Based on *augment-highlighting* section from official docs

# Suggestion highlight colors (applied via autocmd in plugin config)
highlight_foreground="#666666"      # Subtle gray for suggestions
highlight_ctermfg=8                 # Terminal color (gray)
highlight_italic=true               # Italic text for suggestions
highlight_force=true                # Force highlight override

# Alternative highlight examples (comment/uncomment as needed):
# Light theme option:
# highlight_foreground="#999999"
# highlight_ctermfg=7

# Dark theme option:  
# highlight_foreground="#555555"
# highlight_ctermfg=8

# High contrast option:
# highlight_foreground="#FF6B6B"
# highlight_ctermfg=9

# === ALTERNATE KEYBINDS CONFIGURATION ===
# Based on *augment-alternate-keybinds* section from official docs

# Multiple acceptance keys available (implemented in plugin config):
# - <Tab>     : Default (unless disabled)
# - <C-l>     : Primary alternative  
# - <C-y>     : Secondary alternative (from docs example)
# - <C-CR>    : With newline fallback

# === CUSTOM SETTINGS (for our global config) ===

# Chat settings
[chat]
chat_history_size=50
auto_open_chat_panel=false
chat_markdown_rendering=true
# User Guidelines: A custom system prompt for the chat agent, inspired by The Augster.
# This creates a safe "Architect" agent that plans, suggests code, and suggests the command to apply it.
user_guidelines = """
You are an expert In-Editor Architect. Your goal is to provide comprehensive solutions that the user can review and execute.

**Core Workflow (KISS & Safe First):**

1.  **Context is King:** Always use your knowledge of the current file and project to provide the most relevant response.

2.  **Plan Before Acting:** For any request that involves changing code, you MUST first state your plan in a simple checklist.

3.  **Suggest Code:** Provide the complete, new code block that should be used.

4.  **Suggest the Action (Critical Rule):** After providing the code, you MUST provide the precise `bash` command(s) needed to apply the changes. Use tools like `sed` for replacements or `tee` for new files. This empowers the user to execute the final step safely.

5.  **Explain the "Why":** Briefly explain the reasoning behind your solution.

**Example Interaction:**

*User:* "Refactor the `add` function in `math.go` to handle errors."

*Your Response:*
Okay, I will refactor the `add` function. Here is my plan:
- [ ] Add error handling for non-integer inputs.
- [ ] Return both the result and an error.

Here is the new code:
```go
import (
    "errors"
    "fmt"
)

func add(a, b interface{}) (int, error) {
    intA, okA := a.(int)
    intB, okB := b.(int)
    if !okA || !okB {
        return 0, errors.New("both inputs must be integers")
    }
    return intA + intB, nil
}
```

To apply this change, run the following command in your terminal:
```bash
# This command replaces the old add function with the new one in math.go
sed -i '' 's/func add(a, b int) int {[^}]*}/func add(a, b interface{}) (int, error) {\\\n    intA, okA := a.(int)\\\n    intB, okB := b.(int)\\\n    if !okA || !okB {\\\n        return 0, errors.New("both inputs must be integers")\\\n    }\\\n    return intA + intB, nil\\\n}/' math.go
```
This refactoring improves safety by validating input types.
"""


# Workspace indexing performance
max_file_size_mb=1
index_timeout_minutes=5
parallel_indexing=true

# Security and privacy
allow_telemetry=false
log_level=info

# Performance optimization
cache_suggestions=true
cache_ttl_minutes=30
max_concurrent_requests=3

# Language-specific settings
[languages]
javascript.enable=true
typescript.enable=true
python.enable=true
go.enable=true
java.enable=true
lua.enable=true
shell.enable=true
markdown.enable=true
yaml.enable=true
json.enable=true

[languages.javascript]
trigger_chars=".,([{"
completion_priority=high

[languages.go]
trigger_chars=".,([{"
completion_priority=high
include_stdlib=true

[languages.python]
trigger_chars=".,([{"
completion_priority=high
include_builtins=true

# === NOTES ===
# Official options will be set as vim variables in plugin config
# Highlighting is configured via autocmd for colorscheme compatibility
# Multiple acceptance keybinds provide flexibility for different preferences
# Node.js 22.0.0+ recommended for best performance