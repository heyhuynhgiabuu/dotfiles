#!/usr/bin/env bash
# Universal Spec-Driven Development Workflow for OpenCode
# Integrates with OpenCode agents for automated spec → plan → tasks → implementation

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"

# Common utilities are embedded in this script

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Detect project context
detect_project_context() {
    local detect_script="$SCRIPT_DIR/detect-project.sh"
    if [[ -f "$detect_script" ]]; then
        bash "$detect_script"
    else
        log_warning "Project detection script not found, using defaults"
        cat <<EOF
{
  "repo_root": "$REPO_ROOT",
  "language": "unknown",
  "framework": "unknown",
  "project_type": "unknown",
  "testing": "unknown",
  "structure": "unknown",
  "detected_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
    fi
}

# Create feature branch
create_feature_branch() {
    local feature_name="$1"
    local branch_name

    # Generate branch name
    if [[ "$feature_name" =~ ^[0-9]{3}- ]]; then
        branch_name="$feature_name"
    else
        # Find next available number
        local existing_branches
        existing_branches=$(git branch -r | grep -o 'origin/[0-9]\{3\}-' | sed 's|origin/||' | sort -n | tail -1 || echo "000-")

        local next_num
        next_num=$(printf "%03d" $((10#${existing_branches%%-*} + 1)))
        branch_name="${next_num}-${feature_name// /_}"
    fi

    log_info "Creating feature branch: $branch_name"
    git checkout -b "$branch_name"
    echo "$branch_name"
}

# Initialize spec directory
init_spec_directory() {
    local branch_name="$1"
    local feature_dir="$REPO_ROOT/specs/$branch_name"

    log_info "Initializing spec directory: $feature_dir"
    mkdir -p "$feature_dir"

    # Create initial directory structure
    mkdir -p "$feature_dir/contracts"
    mkdir -p "$feature_dir/research"

    echo "$feature_dir"
}

# Generate spec using OpenCode agent
generate_spec() {
    local feature_dir="$1"
    local feature_description="$2"
    local spec_file="$feature_dir/spec.md"

    log_info "Generating specification using OpenCode..."

    # Use OpenCode to generate spec
    cat <<EOF > "$spec_file"
# Feature Specification: $(basename "$feature_dir" | sed 's/[0-9]\{3\}-//' | tr '_' ' ')

**Feature Branch**: $(basename "$feature_dir")
**Created**: $(date)
**Status**: Draft
**Input**: User description: "$feature_description"

## User Scenarios & Testing

### Primary User Story
[Describe the main user journey in plain language based on: $feature_description]

### Acceptance Scenarios
1. **Given** [initial state], **When** [action], **Then** [expected outcome]
2. **Given** [initial state], **When** [action], **Then** [expected outcome]

## Requirements

### Functional Requirements
- **FR-001**: System MUST [main requirement from description]

### Key Entities
- **[Entity 1]**: [What it represents]

## Review & Acceptance Checklist
- [ ] No implementation details
- [ ] Requirements are testable and unambiguous
- [ ] Scope is clearly bounded

---
*Generated by OpenCode Spec-Driven Development Framework*
EOF

    log_success "Specification created: $spec_file"
    echo "$spec_file"
}

# Generate plan using OpenCode agent
generate_plan() {
    local feature_dir="$1"
    local plan_file="$feature_dir/plan.md"

    log_info "Generating implementation plan using OpenCode..."

    # Detect project context
    local project_context
    project_context=$(detect_project_context)

    # Extract project info
    local language framework project_type
    language=$(echo "$project_context" | jq -r '.language')
    framework=$(echo "$project_context" | jq -r '.framework')
    project_type=$(echo "$project_context" | jq -r '.project_type')

    cat <<EOF > "$plan_file"
# Implementation Plan: $(basename "$feature_dir" | sed 's/[0-9]\{3\}-//' | tr '_' ' ')

**Branch**: $(basename "$feature_dir") | **Date**: $(date) | **Spec**: spec.md
**Input**: Feature specification from spec.md
**Project Type**: $project_type

## Technical Context
**Language/Version**: $language
**Primary Dependencies**: $framework
**Project Type**: $project_type

## Constitution Check
**Simplicity**: Projects: 1 | Testing: TDD mandatory | Architecture: Library-first

## Project Structure
Based on detected project type: $project_type

## Phase 0: Research & Analysis
1. Analyze feature requirements
2. Research technical approach for $language + $framework
3. Identify unknowns and dependencies

## Phase 1: Design & Contracts
1. Extract entities from feature spec
2. Generate API contracts
3. Create failing tests (TDD)

## Phase 2: Task Planning
Generate structured tasks with dependencies

## Progress Tracking
- [ ] Phase 0: Research complete
- [ ] Phase 1: Design complete
- [ ] Phase 2: Task planning complete

---
*Generated by OpenCode Spec-Driven Development Framework*
EOF

    log_success "Implementation plan created: $plan_file"
    echo "$plan_file"
}

# Generate tasks using OpenCode agent
generate_tasks() {
    local feature_dir="$1"
    local tasks_file="$feature_dir/tasks.md"

    log_info "Generating tasks using OpenCode..."

    # Detect project context
    local project_context
    project_context=$(detect_project_context)

    # Extract project info
    local language framework project_type testing
    language=$(echo "$project_context" | jq -r '.language')
    framework=$(echo "$project_context" | jq -r '.framework')
    project_type=$(echo "$project_context" | jq -r '.project_type')
    testing=$(echo "$project_context" | jq -r '.testing')

    cat <<EOF > "$tasks_file"
# Tasks: $(basename "$feature_dir" | sed 's/[0-9]\{3\}-//' | tr '_' ' ')

**Input**: Design documents from /specs/$(basename "$feature_dir")/
**Prerequisites**: plan.md (required)
**Project Type**: $project_type

## Phase 3.1: Setup
- [ ] T001 Create project structure for $project_type
- [ ] T002 Initialize $language project with $framework dependencies
- [ ] T003 Configure $testing testing framework

## Phase 3.2: Tests First (TDD)
- [ ] T004 Create failing contract tests
- [ ] T005 Create failing integration tests

## Phase 3.3: Core Implementation
- [ ] T006 Implement core functionality
- [ ] T007 Add error handling and logging

## Phase 3.4: Integration
- [ ] T008 Connect components and services
- [ ] T009 Add middleware and security

## Phase 3.5: Polish
- [ ] T010 Add unit tests
- [ ] T011 Performance optimization
- [ ] T012 Documentation updates

## Dependencies
- Tests (T004-T005) before implementation (T006-T009)
- Implementation before polish (T010-T012)

---
*Generated by OpenCode Spec-Driven Development Framework*
EOF

    log_success "Tasks created: $tasks_file"
    echo "$tasks_file"
}

# Validate workflow prerequisites
validate_prerequisites() {
    local feature_dir="$1"

    log_info "Validating workflow prerequisites..."

    local errors=()

    # Check if we're on a feature branch
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ ! "$current_branch" =~ ^[0-9]{3}- ]]; then
        errors+=("Not on a feature branch. Current: $current_branch")
    fi

    # Check if spec directory exists
    if [[ ! -d "$feature_dir" ]]; then
        errors+=("Feature directory does not exist: $feature_dir")
    fi

    # Check for required files
    local required_files=("spec.md" "plan.md" "tasks.md")
    for file in "${required_files[@]}"; do
        if [[ ! -f "$feature_dir/$file" ]]; then
            errors+=("Missing required file: $feature_dir/$file")
        fi
    done

    if [[ ${#errors[@]} -gt 0 ]]; then
        log_error "Prerequisites validation failed:"
        for error in "${errors[@]}"; do
            log_error "  - $error"
        done
        return 1
    fi

    log_success "All prerequisites validated"
    return 0
}

# Main workflow function
run_workflow() {
    local command="$1"
    shift

    case "$command" in
        init)
            local feature_name="$1"
            local feature_description="${2:-}"

            log_info "Initializing spec-driven workflow for: $feature_name"

            # Create feature branch
            local branch_name
            branch_name=$(create_feature_branch "$feature_name")

            # Initialize spec directory
            local feature_dir
            feature_dir=$(init_spec_directory "$branch_name")

            # Generate initial spec
            if [[ -n "$feature_description" ]]; then
                generate_spec "$feature_dir" "$feature_description"
            else
                log_warning "No feature description provided. Please edit $feature_dir/spec.md manually"
            fi

            log_success "Workflow initialized. Next: run 'plan' command"
            ;;

        plan)
            log_info "Generating implementation plan..."

            # Get current feature directory
            local current_branch feature_dir
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            feature_dir="$REPO_ROOT/specs/$current_branch"

            if [[ ! -d "$feature_dir" ]]; then
                log_error "Feature directory not found. Run 'init' first"
                exit 1
            fi

            # Generate plan
            generate_plan "$feature_dir"

            log_success "Plan generated. Next: run 'tasks' command"
            ;;

        tasks)
            log_info "Generating implementation tasks..."

            # Get current feature directory
            local current_branch feature_dir
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            feature_dir="$REPO_ROOT/specs/$current_branch"

            if [[ ! -d "$feature_dir" ]]; then
                log_error "Feature directory not found. Run 'init' first"
                exit 1
            fi

            # Generate tasks
            generate_tasks "$feature_dir"

            log_success "Tasks generated. Ready for implementation!"
            ;;

        validate)
            log_info "Validating current workflow state..."

            # Get current feature directory
            local current_branch feature_dir
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            feature_dir="$REPO_ROOT/specs/$current_branch"

            if validate_prerequisites "$feature_dir"; then
                log_success "Workflow validation passed"
            else
                log_error "Workflow validation failed"
                exit 1
            fi
            ;;

        status)
            log_info "Checking workflow status..."

            # Get current feature directory
            local current_branch feature_dir
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            feature_dir="$REPO_ROOT/specs/$current_branch"

            echo "Current Branch: $current_branch"
            echo "Feature Directory: $feature_dir"

            if [[ -d "$feature_dir" ]]; then
                echo "Files:"
                ls -la "$feature_dir"
            else
                echo "Feature directory not found"
            fi
            ;;

        detect)
            log_info "Detecting project context..."
            detect_project_context
            ;;

        *)
            log_error "Unknown command: $command"
            echo "Usage: $0 {init|plan|tasks|validate|status|detect} [args...]"
            echo ""
            echo "Commands:"
            echo "  init <feature-name> [description]  Initialize new feature workflow"
            echo "  plan                                 Generate implementation plan"
            echo "  tasks                                Generate implementation tasks"
            echo "  validate                             Validate workflow prerequisites"
            echo "  status                               Show current workflow status"
            echo "  detect                               Detect project context"
            exit 1
            ;;
    esac
}

# Main entry point
main() {
    if [[ $# -eq 0 ]]; then
        log_error "No command provided"
        echo "Usage: $0 {init|plan|tasks|validate|status|detect} [args...]"
        exit 1
    fi

    local command="$1"
    shift

    run_workflow "$command" "$@"
}

# Run main if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi