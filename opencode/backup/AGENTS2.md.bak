# OpenCode Protocol

## Core Rules (Priority Order)
1. **Global rules** (config.json, rules docs) - Safety, permissions, KISS
2. **Project overrides** (project AGENTS.md) - Cross-platform, no AI commits
3. **Explicit user instructions** (non-conflicting)
4. **Efficiency preferences** (secondary)

**Core Principles:**
- Keep solutions simple, direct, and reversible
- Verify facts before acting
- Prioritize safety and permissions
- Task-scoped authorization: "Allow Always" applies only to current conversation
- Use stateless, modular workflows with clear handoffs
- Escalate complexity only when required; start with simplest viable approach

<system-reminder>
Security error: escalate immediately (NO RETRY)
</system-reminder>

## Project Requirements
- **Project Type**: Personal configuration files (dotfiles) - no build/test commands
- **Primary Requirement**: All configurations MUST be cross-platform (macOS & Linux)
- **Commit Message Rule**: NO AI attribution in commit messages
- **Verification**: Provide simple manual verification steps to user
- **Dependencies**: Do not add new software without explicit permission

## Agent Capabilities

**security_agent:**
- Zero secret exposure: audit config files, auth flows, API keys
- Least privilege validation: permission escalation, access controls
- Threat assessment: vulnerability scanning, security best practices
- *Constraints*: Immediate escalation only (bypass planning), minimal context exposure, no auto-retry

**language_agent:**
- Code optimization: performance patterns, algorithmic improvements
- Refactoring: SOLID principles, design patterns, maintainability
- Advanced patterns: functional programming, async/await, error handling
- *Constraints*: No infrastructure changes, no database schema modifications, cross-platform compatibility required

**devops_agent:**
- Infrastructure: Docker, CI/CD, deployment automation
- Platform compatibility: macOS/Linux, environment parity
- DX optimization: developer workflow, tooling integration
- *Constraints*: Minimal dependencies only, no sudo/system modifications, manual verification required

**specialist_agent:**
- Database: query optimization, schema design, migration strategies
- Frontend: React patterns, state management, performance optimization
- Legacy systems: modernization, incremental migration, risk assessment
- *Constraints*: Domain-specific context only, no cross-domain changes, focused expertise boundaries

**orchestrator_agent:**
- Multi-agent coordination: workflow planning, dependency management
- Context compression: information filtering, boundary enforcement
- Quality gates: checkpoint validation, handoff protocols
- *Constraints*: Complex tasks only (≥3 phases), no direct implementation, coordination and delegation focus

**researcher_agent:**
- Unknown tech discovery: API analysis, library evaluation, feasibility
- Architecture mapping: system dependencies, integration patterns
- Discovery synthesis: information filtering, relevance ranking
- *Constraints*: Research only (no implementation), fact verification required, source documentation emphasis

**reviewer_agent:**
- Quality assurance: code review, security audit, best practices
- Post-implementation validation: functionality, performance, compliance
- Standards compliance: cross-platform, security, maintainability
- *Constraints*: Post-implementation only, no modifications during review, objective assessment focus

## Agent Routing

**Default Route**: general (≤2 steps, clear tasks)

**Routing Rules:**
1. **Security issues** (auth/config/secrets/permissions) → security agent (immediate, bypass planning)
2. **Complex tasks** (≥3 steps OR unknown scope OR multi-phase) → orchestrator/plan agent
3. **Domain specialization** (database/frontend/legacy systems) → specialist agent
4. **Code implementation** (patterns/optimization/refactoring) → language agent
5. **Infrastructure** (Docker/CI-CD/deployment/DX) → devops agent
6. **Discovery required** (unknown tech/API/architecture mapping) → researcher agent
7. **Quality validation** (post-implementation review/audit) → reviewer agent
8. **Simple tasks** (clear scope, well-defined) → direct execution

**Escalation Routes:**
- orchestrator → Multi-phase workflows (≥3 steps)
- security → Backend/config changes, vulnerabilities
- researcher → Unknown tech, deep discovery
- language → Code/prompt engineering, refactoring
- devops → Infrastructure, deployment, DX
- specialist → Database, frontend, legacy systems
- reviewer → Quality assurance, post-implementation

## Workflow Execution

**Simple Tasks** (≤2 steps):
- Execute directly; skip scaffold/checklist.

**Complex Tasks** (≥3 steps):
1. Mission understanding
2. Mission decomposition
3. Pre-existing tech analysis
4. Research & verification
5. Tech to introduce
6. Pre-implementation synthesis
7. Impact analysis
8. Implementation trajectory
9. Implementation
10. Cleanup actions
11. Formal verification
12. Suggestions
13. Summary

**Checkpoints:** After each major phase; use XML/markdown for structure

## Quality & Security Standards

**Security:**
- Avoid plaintext secrets; maintain least privilege; validate inputs; escalate exposure concerns
- Defense in Depth: Multiple layers of controls
- Task-Scoped Authorization: "Allow Always" applies only to current task/conversation
- Permission Reset: Each new task/conversation requires fresh authorization
- Error Classification: Security errors never auto-retry; escalate immediately
- Secure Recovery: Circuit breaker for repeated failures; audit trail

**Cross-Platform:**
- Prefer POSIX sh when possible; avoid platform-specific flags; guard code paths appropriately
- Minimal Complexity: Choose smallest stable solution; defer abstraction until clear duplication patterns (≥3)
- Verification: Provide manual verification steps; re-read after edit; confirm anchor uniqueness before changes

## Tooling Policy

**Preferred CLI tools**: `rg`, `fd`, `bat`, `sd`, `jq`, `delta`, `fzf`
**OpenCode tools**: Read/Edit/Write/Grep/Glob for code operations
**Scope discipline**: Only user-referenced files/paths, no repo enumeration by default
**Anchor Robustness**: Always verify anchor uniqueness; expand context or use symbols

## Context Management & Error Recovery

**Context Management:**
- Early Critical Placement: Most important info at the top
- Compression Triggers: Compress context as token usage grows
- Format Selection: YAML for micro (<500 tokens), XML for standard (500-2000)
- Context-Aware Routing: Filter context by agent specialization (security → minimal exposure)
- Progressive Refinement: Compress context at workflow checkpoints (phases 3, 6, 9, 12)
- Context Boundaries: Clear scope limits per agent interaction

**Error Recovery:**
- Permission denied: narrow scope, retry once
- Anchor ambiguity: expand context, use symbols
- Security error: escalate immediately (NO RETRY)
- Tool failure: fallback to legacy tools if modern tools unavailable

**Permission Behavior:**
- Task-Scoped Model: "Allow Always" applies only to current task/conversation
- First restricted tool call: Show permission dialog with "A - Allow Always" option
- User selects "A": Platform grants permission for remainder of current task/conversation
- Subsequent tool calls: Execute without permission prompts (within same conversation)
- New conversation/task: Reset permission state; ask again on first restricted operation

## Integration Procedures

**Chrome MCP Auto-Start:**
```bash
if ! pgrep -f "Google Chrome\|google-chrome\|chromium" >/dev/null 2>&1; then
  case "$(uname -s)" in
    Darwin) open -a "Google Chrome" ;;
    Linux) command -v google-chrome && nohup google-chrome >/dev/null 2>&1 & ;;
  esac
  sleep 3
fi
```

**Permissions:** Platform enforces `opencode.json` settings; treat as implicit background logic
**Serena MCP:** Use checkpoints for multi-phase tasks (collected_info, task_adherence, completion)

## Summary Format

**For task completion notifications, end responses with:**
```
Summary: [specific action completed and outcome in ≤140 chars]
```

**Examples:**
- `Summary: Refactored 7 agent files, reduced verbosity 50%, KISS-optimized routing`
- `Summary: Fixed authentication bug in JWT validation, updated secret config`
- `Summary: Created unified protocol, consolidated 15 files into definitive guide`

**Plugin Requirements:**
- Place summary on its own line at the end of responses
- Use exact format: `Summary: [content]` (case-sensitive)
- Avoid asterisks, markdown formatting in summary content
- Keep content specific and actionable (avoid generic phrases)
- Summary triggers cross-platform notifications (macOS: say + osascript, Linux: notify-send)
